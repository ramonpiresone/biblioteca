
"use client";

import type { Book, AiAnalysis } from '@/types';
import { useState, useEffect } from 'react';
import { generateBookSynopsis } from '@/ai/flows/book-synopsis';
import { getBookDetailsByISBN } from '@/lib/open-library';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from "@/components/ui/dialog";
import { Button } from '@/components/ui/button';
import { Loader } from '@/components/ui/loader';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal } from 'lucide-react';

interface AiAnalysisDialogProps {
  book: Book | null;
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
}

export function AiAnalysisDialog({ book, isOpen, onOpenChange }: AiAnalysisDialogProps) {
  const [analysis, setAnalysis] = useState<AiAnalysis | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (isOpen && book) {
      const fetchAnalysis = async () => {
        setIsLoading(true);
        setError(null);
        setAnalysis(null);

        try {
          let description = book.description || "No detailed description available for this edition.";
          // Attempt to fetch a more detailed description if an ISBN is available
          if (book.isbn && book.isbn.length > 0) {
            const details = await getBookDetailsByISBN(book.isbn[0]);
            if (details?.excerpts && details.excerpts.length > 0) {
              description = details.excerpts[0].text;
            } else if (details?.subtitle) {
                description = details.subtitle;
            }
          }
          
          const result = await generateBookSynopsis({
            title: book.title,
            author: book.author_name?.[0] || 'Unknown Author',
            description: description,
          });
          setAnalysis(result);
        } catch (e) {
          console.error("AI Analysis Error:", e);
          setError("Failed to generate AI analysis. Please try again later.");
        } finally {
          setIsLoading(false);
        }
      };
      fetchAnalysis();
    }
  }, [isOpen, book]);

  if (!book) return null;

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[600px]">
        <DialogHeader>
          <DialogTitle>AI Analysis: {book.title}</DialogTitle>
          <DialogDescription>
            Synopsis and genre analysis generated by AI.
          </DialogDescription>
        </DialogHeader>
        <div className="py-4 space-y-4 max-h-[60vh] overflow-y-auto">
          {isLoading && <Loader size={32} />}
          {error && (
            <Alert variant="destructive">
              <Terminal className="h-4 w-4" />
              <AlertTitle>Error</AlertTitle>
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}
          {analysis && (
            <div className="space-y-4">
              <div>
                <h3 className="font-semibold text-lg mb-1">Synopsis</h3>
                <p className="text-sm text-muted-foreground leading-relaxed whitespace-pre-wrap">{analysis.synopsis}</p>
              </div>
              <div>
                <h3 className="font-semibold text-lg mb-1">Suggested Genres</h3>
                <p className="text-sm text-muted-foreground">{analysis.genres}</p>
              </div>
            </div>
          )}
        </div>
        <DialogFooter>
          <Button variant="outline" onClick={() => onOpenChange(false)}>Close</Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
